// Generated by IcedCoffeeScript 1.7.1-e
(function() {
  var BigInteger, Rational, constants, gcd, is_int, js_lim, lcm, log_base_10, nbi, nbs, nbv, _ref;

  _ref = require('bn'), nbi = _ref.nbi, nbv = _ref.nbv, BigInteger = _ref.BigInteger;

  constants = require('./constants').constants;

  nbs = function(s) {
    return nbi().fromString(s, 10);
  };

  js_lim = nbv(1).shiftLeft(constants.log_2_js_float64_ilim);

  exports.gcd = gcd = function(a, b) {
    var t;
    while (!b.equals(BigInteger.ZERO)) {
      t = b;
      b = a.mod(t);
      a = t;
    }
    return a;
  };

  is_int = function(s) {
    return !!s.match(/^-?\d+$/);
  };

  exports.lcm = lcm = function(a, b) {
    return a.mul(b).div(gcd(a, b));
  };

  log_base_10 = function(imul) {
    var ret;
    ret = 0;
    while (imul > 1) {
      imul = imul / 10;
      ret++;
    }
    return ret;
  };

  exports.Rational = Rational = (function() {
    function Rational(n, d, rdc) {
      this.n = n != null ? n : nbv(0);
      this.d = d != null ? d : nbv(1);
      if (rdc == null) {
        rdc = true;
      }
      if (rdc) {
        this.reduce();
      }
    }

    Rational.prototype.toString = function() {
      return "" + (this.n.toString()) + "/" + (this.d.toString());
    };

    Rational.prototype.inspect = function() {
      return "<Rational " + (this.n.toString()) + "/" + (this.d.toString()) + " ~" + (this.estimate()) + ">";
    };

    Rational.prototype.abs = function() {
      return new Rational(this.n.abs(), this.d.abs());
    };

    Rational.prototype.estimate = function() {
      var bl, d, n, shift, _ref1, _ref2;
      bl = Math.max(this.n.bitLength(), this.d.bitLength());
      _ref1 = (shift = bl - constants.log_2_js_float64_ilim) > 0 ? [this.n.shiftRight(shift), this.d.shiftRight(shift)] : [this.n, this.d], n = _ref1[0], d = _ref1[1];
      _ref2 = [n.toString(), d.toString()], n = _ref2[0], d = _ref2[1];
      if (d === 0) {
        return "\u221e";
      } else {
        return n / d;
      }
    };

    Rational.prototype.copy = function() {
      return new Rational(this.n, this.d, false);
    };

    Rational.prototype.reduce = function() {
      var g, sig;
      sig = 1;
      if (this.n.compareTo(BigInteger.ZERO) < 0) {
        sig *= -1;
        this.n = this.n.abs();
      }
      if (this.d.compareTo(BigInteger.ZERO) < 0) {
        sig *= -1;
        this.d = this.d.abs();
      }
      g = gcd(this.n, this.d);
      if (g > BigInteger.ONE) {
        this.n = this.n.divide(g);
        this.d = this.d.divide(g);
      }
      this.n = this.n.multiply(nbv(sig));
      return this;
    };

    Rational.prototype.cmp = function(a) {
      var l, r;
      l = this.n.mul(a.d);
      r = this.d.mul(a.n);
      return l.compareTo(r);
    };

    Rational.prototype.add = function(a) {
      var d, n;
      n = this.d.multiply(a.n).add(this.n.multiply(a.d));
      d = this.d.multiply(a.d);
      return new Rational(n, d);
    };

    Rational.prototype.mul = function(a) {
      return new Rational(this.n.mul(a.n), this.d.mul(a.d));
    };

    Rational.prototype.div = function(a) {
      return new Rational(this.n.mul(a.d), this.d.mul(a.n));
    };

    Rational.prototype.imul = function(a) {
      return new Rational(this.n.mul(BigNum(a)), this.d);
    };

    Rational.prototype.idiv = function(a) {
      return new Rational(this.n, this.d.multiply(nbv(a)));
    };

    Rational.prototype.sub = function(a) {
      var d, n;
      n = this.n.mul(a.d).sub(this.d.mul(a.n));
      d = this.d.mul(a.d);
      return new Rational(n, d);
    };

    Rational.prototype.scale_to_int = function(imul) {
      if (imul == null) {
        imul = constants.scale;
      }
      return this.mul(new Rational(nbv(imul))).truncated_bignum().intVal();
    };

    Rational.prototype.scale_to_string = function(imul) {
      if (imul == null) {
        imul = constants.scale;
      }
      return this.mul(new Rational(nbv(imul))).truncated_bignum().toString();
    };

    Rational.prototype.to_string = function(imul) {
      var approx, b, d, i, ret, s;
      if (imul == null) {
        imul = constants.scale;
      }
      s = this.scale_to_string(imul);
      b = log_base_10(imul);
      d = s.length - b;
      ret = d <= 0 ? "0." + ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = d; d <= 0 ? _i < 0 : _i > 0; i = d <= 0 ? ++_i : --_i) {
          _results.push("0");
        }
        return _results;
      })()).join('') + s : s.slice(0, d) + "." + s.slice(d, d + b);
      approx = this.estimate();
      if (Math.abs(parseFloat(ret) - approx) > .00001) {
        throw "Massive format_to_double failure in " + (this.inspect()) + " != " + ret;
      }
      return ret;
    };

    Rational.prototype.is_zero = function() {
      return this.n.equals(BigInteger.ZERO);
    };

    Rational.prototype.is_positive = function() {
      return this.gt(new Rational());
    };

    Rational.from_int = function(i) {
      return new Rational(nbv(i));
    };

    Rational.from_db = function(i) {
      return new Rational(nbs(i), nbv(constants.scale));
    };

    Rational.from_bitcoin_tx = function(i) {
      return new Rational(nbs(i), nbv(constants.scale));
    };

    Rational.prototype.truncated_bignum = function() {
      return this.n.div(this.d);
    };

    Rational.from_float = function(n) {
      var d, lim;
      d = 1;
      lim = 8;
      while ((Math.floor(n) !== n) && (lim > 0)) {
        n *= 10;
        d *= 10;
        lim--;
      }
      return new Rational(nbv(n), nbv(d));
    };

    Rational.from_string = function(s) {
      var dpart, idiv, ipart, parts, ret;
      if (!((s != null) && s.length)) {
        return null;
      }
      idiv = 1;
      if (s[s.length - 1] === "%") {
        idiv = 100;
        s = s.slice(0, s.length - 1);
      }
      parts = s.split(".");
      ipart = parts.length > 2 ? null : parts[0].length === 0 ? new Rational() : !is_int(parts[0]) ? null : Rational.from_int(parts[0]);
      dpart = ipart == null ? null : parts.length === 1 ? new Rational() : !is_int(parts[1]) ? null : new Rational(nbs(parts[1]), nbv(10).pow(parts[1].length));
      if ((dpart == null) || (ipart == null)) {
        return null;
      } else {
        ret = ipart.add(dpart);
        if (idiv !== 1) {
          return ret.idiv(idiv);
        } else {
          return ret;
        }
      }
    };

    Rational.prototype.lt = function(a) {
      return this.cmp(a) < 0;
    };

    Rational.prototype.le = function(a) {
      return this.cmp(a) <= 0;
    };

    Rational.prototype.eq = function(a) {
      return this.cmp(a) === 0;
    };

    Rational.prototype.ge = function(a) {
      return this.cmp(a) >= 0;
    };

    Rational.prototype.gt = function(a) {
      return this.cmp(a) > 0;
    };

    return Rational;

  })();

}).call(this);
