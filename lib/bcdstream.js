// Generated by IcedCoffeeScript 1.7.1-e
(function() {
  var Stream, nbv;

  nbv = require('bn').nbv;

  exports.Stream = Stream = (function() {
    function Stream(b) {
      this._b = b;
      this._c = 0;
      this._int64_lim = nbv(1).shiftLeft(61);
      this._uint64_lim = this._int64_lim.shiftLeft(1);
      this._js_float_max = nbv(1).shiftLeft(54);
    }

    Stream.prototype.read_byte = function() {
      var b;
      b = this._b[this._c];
      this._c++;
      return b;
    };

    Stream.prototype.read_boolean = function() {
      return this.read_bytes() !== 0;
    };

    Stream.prototype.read_int16 = function() {
      var ret;
      ret = this._b.readInt16LE(this._c);
      this._c += 2;
      return ret;
    };

    Stream.prototype.read_uint16 = function() {
      var ret;
      ret = this._b.readUInt16LE(this._c);
      this._c += 2;
      return ret;
    };

    Stream.prototype.read_int32 = function() {
      var ret;
      ret = this._b.readInt32LE(this._c);
      this._c += 4;
      return ret;
    };

    Stream.prototype.read_uint32 = function() {
      var ret;
      ret = this._b.readUInt32LE(this._c);
      this._c += 4;
      return ret;
    };

    Stream.prototype.read_int64 = function() {
      var b;
      b = this.read_uint64();
      if (b.compareTo(this._int64_lim) > 0) {
        b = this._uint64_lim.sub(b);
      }
      return b;
    };

    Stream.prototype.read_uint64 = function() {
      var b, b0, b1;
      b0 = this.read_uint32();
      b1 = this.read_uint32();
      b = nbv(b0).add(nbv(b1).shiftLeft(32));
      return b;
    };

    Stream.prototype.read_uint64_number = function() {
      var b;
      b = this.read_uint64();
      if (b.ge(this._js_float_max)) {
        throw new Error("" + (b.toString()) + " > " + (this._js_float_max.toString()) + " and can't be read as a native number");
      }
      return b.intValue();
    };

    Stream.prototype.read_compact_size = function() {
      var b;
      switch ((b = this.read_byte())) {
        case 253:
          return this.read_uint16();
        case 254:
          return this.read_uint32();
        case 255:
          return this.read_uint64_number();
        default:
          return b;
      }
    };

    Stream.prototype.read_bytes = function(n) {
      var ret;
      ret = this._b.slice(this._c, this._c + n);
      this._c += n;
      return ret;
    };

    Stream.prototype.read_string = function() {
      return this.read_bytes(this.read_compact_size());
    };

    return Stream;

  })();

}).call(this);
